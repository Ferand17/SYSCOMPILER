/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var errores_ast = [];
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,23],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,24],$Vc=[1,25],$Vd=[1,27],$Ve=[1,26],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[2,5,18,19,20,27,30,31,32,33,34,35,36,80,81,83,84,87,91,93,94,95,97,106],$Vm=[1,55],$Vn=[1,58],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,56],$Vs=[1,57],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,75],$Vx=[1,83],$Vy=[1,82],$Vz=[1,81],$VA=[1,80],$VB=[1,79],$VC=[1,78],$VD=[1,77],$VE=[1,76],$VF=[1,89],$VG=[1,91],$VH=[27,38,53,75],$VI=[1,113],$VJ=[1,111],$VK=[1,104],$VL=[1,103],$VM=[1,105],$VN=[1,106],$VO=[1,107],$VP=[1,108],$VQ=[1,109],$VR=[1,110],$VS=[1,112],$VT=[1,114],$VU=[1,115],$VV=[1,116],$VW=[1,117],$VX=[1,123],$VY=[8,27,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,58,59,60,73,74,76,80,82,98,99,100,101,102,103,104,105],$VZ=[2,59],$V_=[2,23],$V$=[2,29],$V01=[1,136],$V11=[2,37],$V21=[8,27,32,40,50,51,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V31=[27,32,40,52,53,56,57,58,59,60,80,82,98,99,100,101,102,103,104,105],$V41=[8,27,32,37,38,39,40,41,46,47,48,49,50,51,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V51=[2,40],$V61=[8,27,32,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V71=[8,27,32,40,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V81=[8,27,32,37,38,40,46,47,48,49,50,51,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V91=[30,31,32,33,34,35,36,53],$Va1=[80,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"VARIABLE":7,"punto_coma":8,"VECTOR":9,"LISTA":10,"AGREGARLISTA":11,"SENTIF":12,"MODIFLISTA":13,"SENTSWITCH":14,"SENTWHILE":15,"SENTFOR":16,"SENTDOW":17,"break":18,"continue":19,"return":20,"EXP":21,"SENTFUN":22,"SETLLAMADA":23,"SETWRITELINE":24,"SETSTARTWITH":25,"TIPODATO":26,"id":27,"LISTAID":28,"igual":29,"int":30,"string":31,"char":32,"double":33,"boolean":34,"void":35,"dynamiclist":36,"menor":37,"mayor":38,"menos":39,"not":40,"mas":41,"por":42,"div":43,"mod":44,"potencia":45,"igual_que":46,"dif_que":47,"mayor_igual":48,"menor_igual":49,"or":50,"and":51,"par_izq":52,"par_der":53,"menos_menos":54,"mas_mas":55,"number":56,"cadena":57,"decimal":58,"true":59,"false":60,"TERNARIO":61,"CAST":62,"ACCESOVECTOR":63,"ACCESOLISTA":64,"SETTOCHARARRAY":65,"SETTOSTRING":66,"SETTYPEOF":67,"SETROUND":68,"SETTRUNCATE":69,"SETLENGTH":70,"SETTOUPPER":71,"SETTOLOWER":72,"interrogacion":73,"dos_puntos":74,"cor_izq":75,"cor_der":76,"new":77,"llave_izq":78,"LISTAVALORES":79,"llave_der":80,"append":81,"getvalue":82,"setvalue":83,"if":84,"SENTELSE":85,"else":86,"switch":87,"LISTACASES":88,"SENTCASES":89,"SENTDEFAULT":90,"case":91,"default":92,"while":93,"for":94,"do":95,"LISTAPARAM":96,"writeline":97,"tolower":98,"toupper":99,"length":100,"truncate":101,"round":102,"typeof":103,"tostring":104,"tochararray":105,"start":106,"with":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"punto_coma",18:"break",19:"continue",20:"return",27:"id",29:"igual",30:"int",31:"string",32:"char",33:"double",34:"boolean",35:"void",36:"dynamiclist",37:"menor",38:"mayor",39:"menos",40:"not",41:"mas",42:"por",43:"div",44:"mod",45:"potencia",46:"igual_que",47:"dif_que",48:"mayor_igual",49:"menor_igual",50:"or",51:"and",52:"par_izq",53:"par_der",54:"menos_menos",55:"mas_mas",56:"number",57:"cadena",58:"decimal",59:"true",60:"false",73:"interrogacion",74:"dos_puntos",75:"cor_izq",76:"cor_der",77:"new",78:"llave_izq",80:"llave_der",81:"append",82:"getvalue",83:"setvalue",84:"if",86:"else",87:"switch",91:"case",92:"default",93:"while",94:"for",95:"do",97:"writeline",98:"tolower",99:"toupper",100:"length",101:"truncate",102:"round",103:"typeof",104:"tostring",105:"tochararray",106:"start",107:"with"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[6,1],[6,2],[6,2],[6,2],[6,1],[7,2],[7,2],[7,4],[7,4],[7,3],[28,2],[28,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,4],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[61,5],[62,4],[9,10],[9,8],[9,6],[79,2],[79,1],[63,4],[10,11],[10,7],[11,5],[64,5],[13,6],[12,8],[12,9],[12,7],[85,4],[14,7],[88,2],[88,1],[89,4],[90,3],[15,7],[16,11],[17,8],[22,7],[22,8],[96,3],[96,2],[23,4],[23,3],[24,4],[72,4],[71,4],[70,4],[69,4],[68,4],[67,4],[66,4],[65,4],[25,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1];
  
break;
case 2:

      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
  
break;
case 3:

    this.$ = [$$[$0]];
  
break;
case 4: case 5: case 6: case 7: case 9: case 13: case 19: case 20: case 21:

    this.$ = $$[$0-1];
  
break;
case 8: case 10: case 11: case 12: case 18: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75:

    this.$ = $$[$0];
  
break;
case 14:

    this.$ = {'label':'break'};
  
break;
case 15:

    this.$ = {'label':'continue'};
  
break;
case 16:

    this.$ = {'label':'return', 'valor':$$[$0-1]};
  
break;
case 17:

    this.$ = {'label':'return', 'valor':''};
  
break;
case 22:
 errores_ast.push({'tipo':'lexico','error':yytext,'fila':this._$.first_line,'column':this._$.first_column})
break;
case 23: case 24:

    this.$ = {'label':'variable','id':$$[$0],'tipo':$$[$0-1],'valor':null,'linea':_$[$0-1].first_line,'columna':_$[$0-1].first_column}
  
break;
case 25: case 26:

    this.$ = {'label':'variable','id':$$[$0-2],'tipo':$$[$0-3],'valor':$$[$0],'linea':_$[$0-3].first_line,'columna':_$[$0-3].first_column}
  
break;
case 27:

    this.$ = {'label':'asignacionvariable','id':$$[$0-2],'valor':$$[$0],'linea':_$[$0-2].first_line,'columna':_$[$0-2].first_column}
  
break;
case 28: case 81: case 94:

    $$[$0-1].push($$[$0])
    this.$ = $$[$0-1]
  
break;
case 29: case 82: case 95:

    this.$ = [$$[$0]]
  
break;
case 30:

    this.$ = 'int'
  
break;
case 31:

    this.$ = 'string'
  
break;
case 32:

    this.$ = 'char'
  
break;
case 33:

    this.$ = 'double'
  
break;
case 34:

    this.$ = 'boolean'
  
break;
case 35:

    this.$ = 'void'
  
break;
case 36:

    this.$ = 'lista'
  
break;
case 37: case 38:

    this.$ = {'label':'negar','valor':$$[$0],'signo':$$[$0-1]}
  
break;
case 39: case 40: case 41: case 42: case 43: case 44:

    this.$ = {'label':'aritmetica','valor1':$$[$0-2],'signo':$$[$0-1],'valor2':$$[$0]}
  
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52:

    this.$ = {'label':'comparacion','valor1':$$[$0-2],'signo':$$[$0-1],'valor2':$$[$0]}
  
break;
case 53:

    this.$ = {'label':'compactacion','valor':$$[$0-1]}
  
break;
case 54: case 55:

    this.$ = {'label':'doblesigno','id':$$[$0-1],'signo':$$[$0]}
  
break;
case 76:

    this.$ = {'label':'ternario','comparacion':$$[$0-4],'verdadero':$$[$0-2],'falso':$$[$0]}
  
break;
case 77:

    this.$ = {'label':'cast','tipo':$$[$0-2],'valor':$$[$0]}
  
break;
case 78:

    this.$ = {'label':'lista','id':$$[$0-8],'tipo':$$[$0-9],'valores':[],'linea':_$[$0-9].first_line,'columna':_$[$0-9].first_column}
  
break;
case 79:

    this.$ = {'label':'lista','id':$$[$0-6],'tipo':$$[$0-7],'valores':$$[$0-1],'linea':_$[$0-7].first_line,'columna':_$[$0-7].first_column}
  
break;
case 80:

    this.$ = {'label':'asignacionlista','id':$$[$0-5],'indice':$$[$0-3],'valor':$$[$0]}
  
break;
case 83:

    this.$ = {'label':'accesolista','id':$$[$0-3],'indice':$$[$0-1]}
  
break;
case 84:

    this.$ = {'label':'lista','id':$$[$0-6],'tipo':$$[$0-8],'valores':[],'linea':_$[$0-10].first_line,'columna':_$[$0-10].first_column}
  
break;
case 85:

    this.$ = {'label':'lista','id':$$[$0-2],'tipo':$$[$0-4],'valores':$$[$0],'linea':_$[$0-6].first_line,'columna':_$[$0-6].first_column}
  
break;
case 86:

    this.$ = {'label':'agregarlista','id':$$[$0-2],'valor':$$[$0-1]}
  
break;
case 87:

    this.$ = {'label':'accesolista','id':$$[$0-2],'indice':$$[$0-1]}
  
break;
case 88:

    this.$ = {'label':'asignacionlista','id':$$[$0-3],'indice':$$[$0-2],'valor':$$[$0-1]}
  
break;
case 89:

    this.$ = {'label':'if','comparacion':$$[$0-5],'instrucciones':$$[$0-2],'else':$$[$0]}
  
break;
case 90:

    this.$ = {'label':'if','comparacion':$$[$0-6],'instrucciones':$$[$0-3],'else':$$[$0]}
  
break;
case 91:

    this.$ = {'label':'if','comparacion':$$[$0-4],'instrucciones':$$[$0-1],'else':''}
  
break;
case 92:

    this.$ = {'label':'else','instrucciones':$$[$0-1]}
  
break;
case 93:

    this.$ = {'label':'switch','comparacion':$$[$0-4],'cases':$$[$0-1]}
  
break;
case 96:

    this.$ = {'label':'case','comparacion':$$[$0-2],'instrucciones':$$[$0]}
  
break;
case 97:

    this.$ = {'label':'default','instrucciones':$$[$0]}
  
break;
case 98:

    this.$ = {'label':'while','comparacion':$$[$0-4],'instrucciones':$$[$0-1]}
  
break;
case 99:

    this.$ = {'label':'for','variable':$$[$0-8],'comparacion':$$[$0-6],'iteracion':$$[$0-4],'instrucciones':$$[$0-1]}
  
break;
case 100:

    this.$ = {'label':'dowhile','comparacion':$$[$0-1],'instrucciones':$$[$0-5]}
  
break;
case 101:

    this.$ = {'label':'funcion','id':$$[$0-5],'tipo':$$[$0-6],'variables':'','instrucciones':$$[$0-1],'linea':_$[$0-6].first_line,'columna':_$[$0-6].first_column}
  
break;
case 102:

    this.$ = {'label':'funcion','id':$$[$0-6],'tipo':$$[$0-7],'variables':$$[$0-4],'instrucciones':$$[$0-1],'linea':_$[$0-7].first_line,'columna':_$[$0-7].first_column}
  
break;
case 103:

    $$[$0-2].push($$[$0])
    this.$ = $$[$0-2]
  
break;
case 104:

    this.$= [$$[$0]]
  
break;
case 105:

    this.$ = {'label':'llamada','metodo':$$[$0-3],'valores':$$[$0-1]}
  
break;
case 106:

    this.$ = {'label':'llamada','metodo':$$[$0-2],'valores':[]}
  
break;
case 107:

    this.$ = {'label':'writeline','valor':$$[$0-1]}
  
break;
case 108:

    this.$ = {'label':'tolower','valor':$$[$0-1]}
  
break;
case 109:

    this.$ = {'label':'toupper','valor':$$[$0-1]}
  
break;
case 110:

    this.$ = {'label':'length','valor':$$[$0-1]}
  
break;
case 111:

    this.$ = {'label':'truncate','valor':$$[$0-1]}
  
break;
case 112:

    this.$ = {'label':'round','valor':$$[$0-1]}
  
break;
case 113:

    this.$ = {'label':'typeof','valor':$$[$0-1]}
  
break;
case 114:

    this.$ = {'label':'tostring','valor':$$[$0-1]}
  
break;
case 115:

    this.$ = {'label':'toarray','valor':$$[$0-1]}
  
break;
case 116:

    this.$ = {'label':'inicio','valor':$$[$0]}
  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{1:[3]},{2:$V0,5:[1,40],6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},o($Vl,[2,3]),{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},o($Vl,[2,8]),{8:[1,46]},o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,51],21:50,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o($Vl,[2,18]),{8:[1,84]},{8:[1,85]},{8:[1,86]},o($Vl,[2,22]),{27:[1,87],28:88},{29:$VF,52:$VG,75:[1,90]},{37:[1,92]},{52:[1,93]},{52:[1,94]},{52:[1,95]},{52:[1,96]},{52:[1,97]},{52:[1,98]},{78:[1,99]},{52:[1,100]},{107:[1,101]},o($VH,[2,30]),o($VH,[2,31]),o([27,38,75],[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,9]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),{8:[1,102],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},o($Vl,[2,17]),{21:118,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:119,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:120,23:66,26:121,27:$Vm,30:$V5,31:$V6,32:[1,122],33:$V8,34:$V9,35:$Va,36:$VX,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o([8,27,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,56,57,58,59,60,73,74,76,80,82,98,99,100,101,102,103,104,105],[2,56],{52:$VG,54:[1,124],55:[1,125],75:[1,126]}),o($VY,[2,57]),o($VY,[2,58]),o($VY,$VZ),o($VY,[2,60]),o($VY,[2,61]),o($VY,[2,62]),o($VY,[2,63]),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),o($VY,[2,73]),o($VY,[2,74]),o($VY,[2,75]),{52:[1,127]},{52:[1,128]},{52:[1,129]},{52:[1,130]},{52:[1,131]},{52:[1,132]},{52:[1,133]},{52:[1,134]},{52:[1,135]},o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),{8:$V_,27:$V$,29:$V01,52:[1,138],75:[1,137]},{8:[2,24],27:[1,140],29:[1,139]},{21:141,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:142,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:145,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,53:[1,144],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,79:143,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{26:146,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX},{27:[1,147]},{21:148,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{27:[1,149]},{21:150,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:151,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{7:152,26:153,27:[1,154],30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX},{2:$V0,4:155,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{21:156,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{23:157,27:[1,158]},o($Vl,[2,16]),{21:159,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:160,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:161,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:162,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:163,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:164,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:165,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:166,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:167,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:168,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:169,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:170,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:171,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:172,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:173,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o([8,27,32,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],$V11,{44:$VO,73:$VW}),o($V21,[2,38],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,73:$VW}),{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,174],73:$VW},{53:[1,175]},o([37,38,39,41,42,43,44,45,46,47,48,49,50,51,53,73],$VZ),{37:[1,176]},o($VY,[2,54]),o($VY,[2,55]),{21:177,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{27:[1,178]},{21:179,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:180,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:181,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:182,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:183,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:184,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:185,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:186,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:187,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{76:[1,188]},{26:191,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX,53:[1,189],96:190},{21:192,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o([8,27,29],[2,28]),{8:[2,27],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW,76:[1,193]},{21:195,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,53:[1,194],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o($VY,[2,106]),o($V31,[2,82],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW}),{38:[1,196]},{21:197,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,198],73:$VW},{21:199,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,200],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,201],73:$VW},{8:[1,202]},{27:[1,203],28:88},{29:$VF},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,204],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,205],73:$VW},{8:[2,116]},{52:$VG},o($V41,[2,39],{42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V41,$V51,{42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V61,[2,41],{44:$VO,45:$VP,73:$VW}),o($V61,[2,42],{44:$VO,45:$VP,73:$VW}),o($V71,[2,43],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW}),o($V61,[2,44],{44:$VO,73:$VW}),o($V81,[2,45],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V81,[2,46],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V81,[2,47],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V81,[2,48],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V81,[2,49],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o($V81,[2,50],{39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,73:$VW}),o([8,27,32,40,50,52,53,56,57,58,59,60,74,76,80,82,98,99,100,101,102,103,104,105],[2,51],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,51:$VV,73:$VW}),o($V21,[2,52],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,73:$VW}),{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW,74:[1,206]},o($VY,[2,53]),{21:207,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{26:208,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW,76:[1,209]},{21:210,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,211],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,212],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,213],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,214],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,215],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,216],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,217],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,218],73:$VW},{8:[2,25],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},{29:[1,219]},{78:[1,220]},{26:222,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX,53:[1,221]},{27:[1,223]},{8:[2,26],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},{29:[1,224]},o($VY,[2,105]),o($V31,[2,81],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW}),{27:[1,225]},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,226],73:$VW},{78:[1,227]},{21:228,23:66,27:$Vm,32:$Vn,37:$VI,38:$VJ,39:[1,229],40:$Vp,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,73:$VW,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{78:[1,230]},{78:[1,231]},{21:232,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{8:$V_,27:$V$,29:$V01},{93:[1,233]},{8:[2,107]},{21:234,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o($V71,[2,77],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW}),{38:[1,235]},o($VY,[2,83]),{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,236],73:$VW},o($VY,[2,115]),o($VY,[2,114]),o($VY,[2,113]),o($VY,[2,112]),o($VY,[2,111]),o($VY,[2,110]),o($VY,[2,109]),o($VY,[2,108]),{77:[1,237],78:[1,238]},{2:$V0,4:239,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{78:[1,240]},{27:[1,241]},o($V91,[2,104]),{21:242,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{29:[1,243]},{8:[2,86]},{2:$V0,4:244,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,245],73:$VW},{21:246,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{88:247,90:248,92:[1,249]},{2:$V0,4:250,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{8:[1,251],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},{52:[1,252]},o($V71,[2,76],{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW}),o($VH,[2,36]),o($VY,[2,87]),{26:253,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX},{21:145,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,79:254,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,255],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{2:$V0,4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},o($V91,[2,103]),{8:[2,80],37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW},{65:258,77:[1,257],105:$VE},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,259],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{8:[2,88]},o([27,32,37,38,39,40,41,46,47,48,49,50,51,52,56,57,58,59,60,82,98,99,100,101,102,103,104,105],$V51,{42:$V11,43:$V11,45:$V11,53:$V11,44:$VO,73:$VW}),{80:[1,260],89:261,91:[1,262]},o($Va1,[2,95]),{74:[1,263]},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,264],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{21:265,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{21:266,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{75:[1,267]},{21:195,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,80:[1,268],82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},o($Vl,[2,101]),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,269],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{36:[1,270]},{8:[2,85]},o($Vl,[2,91],{85:271,86:[1,272]}),o($Vl,[2,93]),o($Va1,[2,94]),{21:273,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{2:$V0,4:274,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},o($Vl,[2,98]),{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,275],73:$VW},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,53:[1,276],73:$VW},{21:277,23:66,27:$Vm,32:$Vn,39:$Vo,40:$Vp,52:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:62,62:63,63:64,64:65,65:67,66:68,67:69,68:70,69:71,70:72,71:73,72:74,82:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$VE},{8:[2,79]},o($Vl,[2,102]),{37:[1,278]},o($Vl,[2,89]),{12:279,78:[1,280],84:$Ve},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW,74:[1,281]},o($Va1,[2,97],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,22:17,23:18,24:19,25:20,26:22,6:41,2:$V0,18:$V1,19:$V2,20:$V3,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk}),{78:[1,282]},{8:[2,100]},{37:$VI,38:$VJ,39:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,73:$VW,76:[1,283]},{26:284,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$VX},o($Vl,[2,90]),{2:$V0,4:285,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{2:$V0,4:286,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{2:$V0,4:287,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{8:[2,78]},{38:[1,288]},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,289],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},o($Va1,[2,96],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,22:17,23:18,24:19,25:20,26:22,6:41,2:$V0,18:$V1,19:$V2,20:$V3,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk}),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:$V3,22:17,23:18,24:19,25:20,26:22,27:$V4,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,80:[1,290],81:$Vc,83:$Vd,84:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi,97:$Vj,106:$Vk},{8:[2,84]},o($Vl,[2,92]),o($Vl,[2,99])],
defaultActions: {40:[2,1],157:[2,116],205:[2,107],226:[2,86],245:[2,88],258:[2,85],268:[2,79],276:[2,100],283:[2,78],288:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios
break;
case 1://comentarios
break;
case 2://comentario
break;
case 3:return 31
break;
case 4:return 33
break;
case 5:return 30
break;
case 6:return 34
break;
case 7:return 32
break;
case 8:return 35
break;
case 9:return 'function'
break;
case 10:return 20
break;
case 11:return 100
break;
case 12:return 84
break;
case 13:return 86
break;
case 14:return 59
break;
case 15:return 60
break;
case 16:return 18
break;
case 17:return 87
break;
case 18:return 91
break;
case 19:return 92
break;
case 20:return 19
break;
case 21:return 93
break;
case 22:return 95
break;
case 23:return 94
break;
case 24:return 77
break;
case 25:return 36
break;
case 26:return 81
break;
case 27:return 82
break;
case 28:return 83
break;
case 29:return 97
break;
case 30:return 98
break;
case 31:return 99
break;
case 32:return 100
break;
case 33:return 101
break;
case 34:return 102
break;
case 35:return 104
break;
case 36:return 103
break;
case 37:return 105
break;
case 38:return 106
break;
case 39:return 107
break;
case 40:return 8
break;
case 41://peuba
break;
case 42:return 74
break;
case 43:return 78
break;
case 44:return 80
break;
case 45:return 52
break;
case 46:return 53
break;
case 47:return 75
break;
case 48:return 76
break;
case 49:return 55
break;
case 50:return 41
break;
case 51:return 54
break;
case 52:return 39
break;
case 53:return 45
break;
case 54:return 42
break;
case 55:return 43
break;
case 56:return 44
break;
case 57:return 49
break;
case 58:return 48
break;
case 59:return 38
break;
case 60:return 37
break;
case 61:return 46
break;
case 62:return 29
break;
case 63:return 47
break;
case 64:return 51
break;
case 65:return 50
break;
case 66:return 40
break;
case 67:return 73
break;
case 68:return 57
break;
case 69:return 32
break;
case 70:return 57
break;
case 71:return 58
break;
case 72:return 56
break;
case 73:return 27
break;
case 74:return 5
break;
case 75: errores_ast.push({'tipo':'lexico','error':yy_.yytext,'fila':yy_.yylloc.first_line,'column':yy_.yylloc.first_column})
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setvalue\b)/i,/^(?:writeline\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:tostring\b)/i,/^(?:typeof\b)/i,/^(?:tochararray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:`[^\`]*`)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.errores = errores_ast;
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}